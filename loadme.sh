# 
# !!! Load script generated by nmk-base plugin, don't edit !!!
#

__checkSysDeps() {
    local cmd="${1}"
    local packages="${2}"
    local url="${3}"
    
    # Command found?
    echo -n "Check ${cmd} "
    if test -z "$(which "${cmd}" 2>/dev/null || true)"; then
        echo "[missing]"
        if test -n "${packages}"; then
            # APT mode
            NMK_APT_DEPS="${NMK_APT_DEPS} ${packages}"
        else
            # URL mode
            echo "Please install from ${url}"
            MISSING_DEPS=1
        fi
    else
        echo "[OK]"
    fi
}
__installSysDeps() {
    # Something to install?
    if test -n "${NMK_APT_DEPS}"; then
        # Yes!
        echo "Installing missing packages:${NMK_APT_DEPS}"
        local sudo_prefix=""
        local install_suffix="-y"
        if test "$(id -u)" != "0"; then
            sudo_prefix="sudo "
            install_suffix=""
        fi
        
        # Repo refresh
        cmd="${sudo_prefix}apt update"
        echo "> ${cmd}"
        ${cmd} || return $?

        # Install
        cmd="${sudo_prefix}apt install${NMK_APT_DEPS} ${install_suffix}"
        unset NMK_APT_DEPS
        echo "> ${cmd}"
        ${cmd} || return $?
    fi
}
__findVenv() {
    # Current git root folder
    local git_root="$(git rev-parse --show-toplevel 2>/dev/null || true)"
    if test "${git_root}" == ""; then
        # No more git root found --> no venv found
        echo ""
    elif test -f "${git_root}/venv/venvOK"; then
        # Venv found!
        echo "${git_root}/venv"
    else
        # Look for venv in potential parent git repo
        (cd ${git_root}/.. && __findVenv)
    fi
}

# Test for git-bash mode
if test -f /git-bash.exe; then
    # Windows-style venv
    IS_GIT_BASH=1
    VENV_SUFFIX=Scripts
    PYTHON_EXE=python
else
    # Linux-style venv
    VENV_SUFFIX=bin
    PYTHON_EXE=python3
fi

# Look for venv
VENV_ROOT="$(__findVenv)"

# Create venv if not done yet
if test -z "${VENV_ROOT}"; then
    # Check system dependencies
    if test -n "${IS_GIT_BASH}"; then
        # git-bash mode
        MISSING_DEPS=0
        __checkSysDeps git "" "https://git-scm.com/downloads"
        __checkSysDeps python "" "https://www.python.org/downloads/"
        
        # Stop if something is missing
        if test ${MISSING_DEPS} -ne 0; then
            return 1
        fi
    else
        # Linux mode
        __checkSysDeps git "git"
        __checkSysDeps python3 "python3 python3-venv"
        
        # Perform installs if needed
        __installSysDeps || return $?
    fi

    # Create venv
    echo Create venv...
    rm -Rf venv
    ${PYTHON_EXE} -m venv venv

    # Load it
    source venv/${VENV_SUFFIX}/activate
    
    # Bootstrap it
    python -m pip install pip wheel --upgrade

    # Install requirements (if present)
    if test -f "requirements.txt"; then
        pip install -r requirements.txt 
    else
        # Default: only install nmk
        pip install nmk
    fi

    # Patch it for nmk completion
    echo ' ' >> venv/${VENV_SUFFIX}/activate
    if test -n "${IS_GIT_BASH}"; then
        # On git bash, handle completion through temporary files rather than descriptors
        # see https://github.com/kislyuk/argcomplete#git-bash-support
        echo 'export ARGCOMPLETE_USE_TEMPFILES=1' >> venv/${VENV_SUFFIX}/activate
    fi
    echo 'eval "$(register-python-argcomplete nmk)"' >> venv/${VENV_SUFFIX}/activate

    # Done, mark venv as "ready"
    touch venv/venvOK
    VENV_ROOT=venv
fi

# Finally load venv
source "${VENV_ROOT}/${VENV_SUFFIX}/activate"

# Clean useless stuff from terminal context
unset __checkSysDeps
unset __installSysDeps
unset __findVenv
unset VENV_SUFFIX
unset VENV_ROOT
unset PYTHON_EXE
unset IS_GIT_BASH
unset MISSING_DEPS

# Run command specified as parameter, if any
"$@"
